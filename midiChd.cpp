// midiChd.cpp - define chord structure

#include "midi.h"

//struct MChdDef {char *lbl;  char tmp [8];  char calc; ubyte yId; char *etc;};
// .calc means use it to guess chords in Score()
// .yId  99 if non yamaha sty chordtype.
// .etc  similar labels
MChdDef MChd [] = {          // all need >= 4 defined so oct,5,off are weird
   {"off",   {'x','x','x',   'x'}, 'n', 34, "cancel"},
   {"oct",   {0,'x','x',     'x'}, 'n', 30, "1+8 unison"},
   {"5",     {0,7,'x',       'x'}, 'n', 31, "1+5"},   // only guy missing 3rd
   {"",      {0,4,7,         'x'}, 'y',  0, "maj"},        // WITH later stuff
   {"m",     {0,3,7,         'x'}, 'y',  8, "min -"},
   {"dim",   {0,3,6,         'x'}, 'y', 17, "o"},
   {"aug",   {0,4,8,         'x'}, 'y',  7, "+"},
   {"sus",   {0,5,7,         'x'}, 'y', 32, "sus4"},
   {"sus2",  {0,2,7,         'x'}, 'y', 33, "1+2+5"},
   {"4",     {0,4,7,5,       'x'}, 'n', 99, "add"},   // non yamaha
   {"2",     {0,4,7,2,       'x'}, 'n',  4, "add2 add9 Maj(9) Madd9"},
   {"6",     {0,4,7,9,       'x'}, 'y',  1, "maj6 M6"},
   {"m2",    {0,3,7,2,       'x'}, 'n', 12, "min(9) m(9)"},
   {"m6",    {0,3,7,9,       'x'}, 'n',  9, "min6"},
   {"7",     {0,4,7,10,      'x'}, 'y', 19, "dom7"},
   {"M7",    {0,4,7,11,      'x'}, 'y',  2, "Maj7"},
   {"m7",    {0,3,7,10,      'x'}, 'y', 10, "min7"},
   {"mM7",   {0,3,7,11,      'x'}, 'y', 15, "minMaj7"},
   {"dim7",  {0,3,6, 9,      'x'}, 'n', 18, ""},
   {"hDim7", {0,3,6,10,      'x'}, 'n', 11, "min7b5 m7b5 (slashes)"},
   {"7sus",  {0,5,7,10,      'x'}, 'n', 20, "7sus4"},
   {"7b5",   {0,4,6,10,      'x'}, 'n', 21, ""},
   {"7#5",   {0,4,8,10,      'x'}, 'n', 29, "7aug"},
   {"M7#5",  {0,4,8,11,      'x'}, 'n', 28, "Maj7aug M7aug augM7"},
   {"7#11",  {0,4,7,10,6,    'x'}, 'n', 23, "7(#11)"},
   {"7,13",  {0,4,7,10,9,    'x'}, 'n', 24, "7(13) 7(add13)"},
   {"7b9",   {0,4,7,10,1,    'x'}, 'n', 25, "7(b9) b9"},
   {"7b13",  {0,4,7,10,8,    'x'}, 'n', 26, "7(b13)"},
   {"7#9",   {0,4,7,10,3,    'x'}, 'n', 27, "7(#9)"},
   {"9",     {0,4,7,10,2,    'x'}, 'n', 22, "7(9)"},
   {"M7#11", {0,4,7,11,6,    'x'}, 'n',  3, "Maj7(#11) M7(#11)"},
   {"M9",    {0,4,7,11,2,    'x'}, 'n',  5, "Maj7(9) 7(9) maj9"},
   {"6,9",   {0,4,7, 9,2,    'x'}, 'n',  6, "Maj6(9) 6(9)"},
   {"m9",    {0,3,7,10,2,    'x'}, 'n', 13, "min7(9) m7(9)"},
   {"m7,11", {0,3,7,10,5,    'x'}, 'n', 14, "min7(11) m7(11)"},
   {"mM7,9", {0,3,7,11,2,    'x'}, 'n', 16, "minMaj7(9) mM7(9)"},
   {"9sus",  {0,5,7,10,2,    'x'}, 'n', 99, "9sus4"}, // non yamaha
   {"11",    {0,4,7,10,2,5,  'x'}, 'n', 99, ""},          // ...esp if >5 notes
   {"13",    {0,4,7,10,2,5,9,'x'}, 'n', 99, ""},
   {"1/5",   {0,5,9,         'x'}, 'n', 99, ""},
   {"1/3",   {0,3,8,         'x'}, 'n', 99, "m#5"},
   {"5/1",   {0,2,5,9,       'x'}, 'n', 99, ""},
   {"m2/4",  {0,4,9,         'x'}, 'n', 99, ""},
   {"m3/5",  {0,2,5,10,      'x'}, 'n', 99, ""}
};
ubyte NMChd = BITS (MChd);



ubyte ChdPos (char *ch, ubyte *root, ubyte *bass, char *sty)
{ TStr  ch1, ch2, ch3, ch4;            // ROOTqual/bassSTY
  char *pc;
  ubyte p;
   StrCp (ch1, ch);
   if      ((pc = StrCh (ch1, '.')))  {StrCp (ch4, pc);   *pc = '\0';}
   else if ((pc = StrCh (ch1, '!')))  {StrCp (ch4, pc);   *pc = '\0';}
   else if ((pc = StrCh (ch1, '>')))  {StrCp (ch4, pc);   *pc = '\0';}
   else if ((pc = StrCh (ch1, '<')))  {StrCp (ch4, pc);   *pc = '\0';}
   if ((CHDN (ch1 [1]) == 'b') || (ch1 [1] == '#'))
        {StrCp (ch2, & ch1 [2]);   ch1 [2] = '\0';}
   else {StrCp (ch2, & ch1 [1]);   ch1 [1] = '\0';}
   ch3 [0] = '\0';
   if ((pc = StrCh (ch2, '/')))  {StrCp (ch3, pc+1);   *pc = '\0';}

   if (root)                            *root = MNt (ch1);
   if (bass)  {*bass = 12;   if (*ch3)  *bass = MNt (ch3);}
   if (sty)   StrCp (sty, ch4);

   for (p = 0;  p < NMChd;  p++)  if (! StrCm (CC(MChd [p].lbl), ch2, 'x'))
                                     return p;
   return MAJ_CHD;
}


/* yamaha order
(maj) 6 M7 M7#11 2 M9 6,9 aug m m6 m7 m7b5 m2 m9 m7,11 mM7 mM7,9 dim dim7
7 7sus 7b5 9 7#11 7,13 7b9 7b13 7#9 M7#5 7#5 oct 5 sus sus2

      01  {"",      {0,4,7,         'x'}, 'y',  0, "maj"},
      02  {"6",     {0,4,7,9,       'x'}, 'y',  1, "maj6 M6"},
      04  {"M7",    {0,4,7,11,      'x'}, 'y',  2, "Maj7"},
      08  {"M7#11", {0,4,7,11,6,    'x'}, 'n',  3, "Maj7(#11) M7(#11)"},
      10  {"2",     {0,4,7,2,       'x'}, 'n',  4, "add2 Maj(9) Madd9"},
      20  {"M9",    {0,4,7,11,2,    'x'}, 'n',  5, "Maj7(9) 7(9) maj9"},
      40  {"6,9",   {0,4,7, 9,2,    'x'}, 'n',  6, "Maj6(9) 6(9)"},
      80  {"aug",   {0,4,8,         'x'}, 'y',  7, "+"},

    01    {"m",     {0,3,7,         'x'}, 'y',  8, "min -"},
    02    {"m6",    {0,3,7,9,       'x'}, 'y',  9, "min6"},
    04    {"m7",    {0,3,7,10,      'x'}, 'y', 10, "min7"},
    08    {"m7b5",  {0,3,6,10,      'x'}, 'y', 11, "min7b5 hDim7 (slashes)"},
    10    {"m2",    {0,3,7,2,       'x'}, 'n', 12, "min(9) m(9)"},
    20    {"m9",    {0,3,7,10,2,    'x'}, 'n', 13, "min7(9) m7(9)"},
    40    {"m7,11", {0,3,7,10,5,    'x'}, 'n', 14, "min7(11) m7(11)"},
    80    {"mM7",   {0,3,7,11,      'x'}, 'y', 15, "minMaj7"},

  01      {"mM7,9", {0,3,7,11,2,    'x'}, 'n', 16, "minMaj7(9) mM7(9)"},
  02      {"dim",   {0,3,6,         'x'}, 'y', 17, "o"},
  04      {"dim7",  {0,3,6, 9,      'x'}, 'y', 18},
  08      {"7",     {0,4,7,10,      'x'}, 'y', 19, "dom7"},
  10      {"7sus",  {0,5,7,10,      'x'}, 'n', 20, "7sus4"},
  20      {"7b5",   {0,4,6,10,      'x'}, 'n', 21},
  40      {"9",     {0,4,7,10,2,    'x'}, 'n', 22, "7(9)"},
  80      {"7#11",  {0,4,7,10,6,    'x'}, 'n', 23, "7(#11)"},

01        {"7,13",  {0,4,7,10,9,    'x'}, 'n', 24, "7(13) 7(add13)"},
02        {"7b9",   {0,4,7,10,1,    'x'}, 'n', 25, "7(b9) b9"},
04        {"7b13",  {0,4,7,10,8,    'x'}, 'n', 26, "7(b13)"},
08        {"7#9",   {0,4,7,10,3,    'x'}, 'n', 27, "7(#9)"},
10        {"M7#5",  {0,4,8,11,      'x'}, 'n', 28, "Maj7aug M7aug augM7"},
20        {"7#5",   {0,4,8,10,      'x'}, 'n', 29, "7aug"},
40        {"oct",   {0,'x','x',     'x'}, 'n', 30, "1+8 unison"},
80        {"5",     {0,7,'x',       'x'}, 'n', 31, "1+5"},

1         {"sus",   {0,5,7,         'x'}, 'n', 32, "sus4"},
2         {"sus2",  {0,2,7,         'x'}, 'n', 33, "1+2+5"},
*/
